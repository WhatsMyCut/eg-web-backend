# import Post from "./generated/prisma.graphql"
# import * from './generated/prisma.graphql'
# import ActionCategory from './generated/prisma.graphql'
# import Petition from './generated/prisma.graphql'
# import Role from './generated/prisma.graphql'
# import User from './generated/prisma.graphql'
# import EventAction from './generated/prisma.graphql'
# import Action from './generated/prisma.graphql'

type Query {
  me: User
  myAvailableActions: [CommunityStatsEventAction]
  getCountryStats : [CountryStats]
  sectorActionsByName(name:String!): [ActionCategoryWithCommunityStats]
  action(where: ActionWhereUniqueInput!): Action
  actions(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Action]!
  actionsConnection(where: ActionWhereInput, orderBy: ActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionConnection!
  actionCategory(where: ActionCategoryWhereUniqueInput!): ActionCategoryWithCommunityStats
  actionCategories(where: ActionCategoryWhereInput, orderBy: ActionCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionCategoryWithCommunityStats]!
  actionCategoriesConnection(where: ActionCategoryWhereInput, orderBy: ActionCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionCategoryConnection!
  eventAction(where: EventActionWhereUniqueInput!): EventAction
  eventActions(where: EventActionWhereInput, orderBy: EventActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EventAction]!
  eventActionsConnection(where: EventActionWhereInput, orderBy: EventActionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventActionConnection!
  petition(where: PetitionWhereUniqueInput!): Petition
  petitions(where: PetitionWhereInput, orderBy: PetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Petition]!
  petitionsConnection(where: PetitionWhereInput, orderBy: PetitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PetitionConnection!
  role(where: RoleWhereUniqueInput!): Role
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  communityEvent(where: CommunityEventWhereUniqueInput!): CommunityEvent
  communityEvents(where: CommunityEventWhereInput, orderBy: CommunityEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CommunityEvent]!
  communityEventsConnection(where: CommunityEventWhereInput, orderBy: CommunityEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommunityEventConnection!
  node(id: ID!): Node
}

type Mutation {
  signup(username: String!, password: String!, country:String): AuthPayload!
  login(username: String!, password: String!): AuthPayload!
  createAction(data: ActionCreateInput!): Action!
  updateAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateManyActions(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): BatchPayload!
  upsertAction(where: ActionWhereUniqueInput!, create: ActionCreateInput!, update: ActionUpdateInput!): Action!
  deleteAction(where: ActionWhereUniqueInput!): Action
  deleteManyActions(where: ActionWhereInput): BatchPayload!
  createActionCategory(data: ActionCategoryCreateInput!): ActionCategory!
  updateActionCategory(data: ActionCategoryUpdateInput!, where: ActionCategoryWhereUniqueInput!): ActionCategory
  updateManyActionCategories(data: ActionCategoryUpdateManyMutationInput!, where: ActionCategoryWhereInput): BatchPayload!
  upsertActionCategory(where: ActionCategoryWhereUniqueInput!, create: ActionCategoryCreateInput!, update: ActionCategoryUpdateInput!): ActionCategory!
  deleteActionCategory(where: ActionCategoryWhereUniqueInput!): ActionCategory
  deleteManyActionCategories(where: ActionCategoryWhereInput): BatchPayload!
  createEventAction(data: EventActionCreateInput!): EventAction!
  updateEventAction(data: EventActionUpdateInput!, where: EventActionWhereUniqueInput!): EventAction
  updateManyEventActions(data: EventActionUpdateManyMutationInput!, where: EventActionWhereInput): BatchPayload!
  upsertEventAction(where: EventActionWhereUniqueInput!, create: EventActionCreateInput!, update: EventActionUpdateInput!): EventAction!
  deleteEventAction(where: EventActionWhereUniqueInput!): EventAction
  deleteManyEventActions(where: EventActionWhereInput): BatchPayload!
  createPetition(data: PetitionCreateInput!): Petition!
  updatePetition(data: PetitionUpdateInput!, where: PetitionWhereUniqueInput!): Petition
  updateManyPetitions(data: PetitionUpdateManyMutationInput!, where: PetitionWhereInput): BatchPayload!
  upsertPetition(where: PetitionWhereUniqueInput!, create: PetitionCreateInput!, update: PetitionUpdateInput!): Petition!
  deletePetition(where: PetitionWhereUniqueInput!): Petition
  deleteManyPetitions(where: PetitionWhereInput): BatchPayload!
  createRole(data: RoleCreateInput!): Role!
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateManyRoles(data: RoleUpdateManyMutationInput!, where: RoleWhereInput): BatchPayload!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createCommunityEvent(data: CommunityEventCreateInput!): CommunityEvent!
  updateCommunityEvent(data: CommunityEventUpdateInput!, where: CommunityEventWhereUniqueInput!): CommunityEvent
  updateManyCommunityEvents(data: CommunityEventUpdateManyMutationInput!, where: CommunityEventWhereInput): BatchPayload!
  upsertCommunityEvent(where: CommunityEventWhereUniqueInput!, create: CommunityEventCreateInput!, update: CommunityEventUpdateInput!): CommunityEvent!
  deleteCommunityEvent(where: CommunityEventWhereUniqueInput!): CommunityEvent
  deleteManyCommunityEvents(where: CommunityEventWhereInput): BatchPayload!
}

type AuthPayload {
	token: String!
	user: User!
}

type CountryStats {
  country: String
  points: Int
}

type CommunityStatsEventAction {
	id: ID!
	action: CommunityStatsAction!
	user: User!
	took_action: Boolean!
	createdAt: DateTime!
	updatedAt: DateTime!
}

type ActionCategoryWithCommunityStats {
	id: ID!
	name: String!
	actions: [CommunityStatsAction]
	primary_image: String
	video_id: String
	createdAt: DateTime!
	updatedAt: DateTime!
}

type RankingStats {
  points: Float
}


type CommunityStatsAction {
	id: ID!
	category: ActionCategory
	primary_image: String
	active: Boolean
	short_description: String!
	action_taken_description: String!
	schedule: Schedule
	video_url: String
	carbon_dioxide: Float
	order: Int
	water: Float
	waste: Float
  points: Int
  carbon_community: Float
	water_community: Float
	waste_community: Float
	points_community: Int
	external_url: String
	isGame: Boolean!
	related_actions: [Action]
	author: User!
	createdAt: DateTime!
	updatedAt: DateTime!
}
