// Code generated by Prisma (prisma@1.22.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  action: (where?: ActionWhereInput) => Promise<boolean>;
  actionCategory: (where?: ActionCategoryWhereInput) => Promise<boolean>;
  communityEvent: (where?: CommunityEventWhereInput) => Promise<boolean>;
  eventAction: (where?: EventActionWhereInput) => Promise<boolean>;
  petition: (where?: PetitionWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  action: (where: ActionWhereUniqueInput) => ActionPromise;
  actions: (
    args?: {
      where?: ActionWhereInput;
      orderBy?: ActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Action>;
  actionsConnection: (
    args?: {
      where?: ActionWhereInput;
      orderBy?: ActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ActionConnectionPromise;
  actionCategory: (
    where: ActionCategoryWhereUniqueInput
  ) => ActionCategoryPromise;
  actionCategories: (
    args?: {
      where?: ActionCategoryWhereInput;
      orderBy?: ActionCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ActionCategory>;
  actionCategoriesConnection: (
    args?: {
      where?: ActionCategoryWhereInput;
      orderBy?: ActionCategoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ActionCategoryConnectionPromise;
  communityEvent: (
    where: CommunityEventWhereUniqueInput
  ) => CommunityEventPromise;
  communityEvents: (
    args?: {
      where?: CommunityEventWhereInput;
      orderBy?: CommunityEventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CommunityEvent>;
  communityEventsConnection: (
    args?: {
      where?: CommunityEventWhereInput;
      orderBy?: CommunityEventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommunityEventConnectionPromise;
  eventAction: (where: EventActionWhereUniqueInput) => EventActionPromise;
  eventActions: (
    args?: {
      where?: EventActionWhereInput;
      orderBy?: EventActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<EventAction>;
  eventActionsConnection: (
    args?: {
      where?: EventActionWhereInput;
      orderBy?: EventActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EventActionConnectionPromise;
  petition: (where: PetitionWhereUniqueInput) => PetitionPromise;
  petitions: (
    args?: {
      where?: PetitionWhereInput;
      orderBy?: PetitionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Petition>;
  petitionsConnection: (
    args?: {
      where?: PetitionWhereInput;
      orderBy?: PetitionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PetitionConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RolePromise;
  roles: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Role>;
  rolesConnection: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RoleConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAction: (data: ActionCreateInput) => ActionPromise;
  updateAction: (
    args: { data: ActionUpdateInput; where: ActionWhereUniqueInput }
  ) => ActionPromise;
  updateManyActions: (
    args: { data: ActionUpdateManyMutationInput; where?: ActionWhereInput }
  ) => BatchPayloadPromise;
  upsertAction: (
    args: {
      where: ActionWhereUniqueInput;
      create: ActionCreateInput;
      update: ActionUpdateInput;
    }
  ) => ActionPromise;
  deleteAction: (where: ActionWhereUniqueInput) => ActionPromise;
  deleteManyActions: (where?: ActionWhereInput) => BatchPayloadPromise;
  createActionCategory: (
    data: ActionCategoryCreateInput
  ) => ActionCategoryPromise;
  updateActionCategory: (
    args: {
      data: ActionCategoryUpdateInput;
      where: ActionCategoryWhereUniqueInput;
    }
  ) => ActionCategoryPromise;
  updateManyActionCategories: (
    args: {
      data: ActionCategoryUpdateManyMutationInput;
      where?: ActionCategoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertActionCategory: (
    args: {
      where: ActionCategoryWhereUniqueInput;
      create: ActionCategoryCreateInput;
      update: ActionCategoryUpdateInput;
    }
  ) => ActionCategoryPromise;
  deleteActionCategory: (
    where: ActionCategoryWhereUniqueInput
  ) => ActionCategoryPromise;
  deleteManyActionCategories: (
    where?: ActionCategoryWhereInput
  ) => BatchPayloadPromise;
  createCommunityEvent: (
    data: CommunityEventCreateInput
  ) => CommunityEventPromise;
  updateCommunityEvent: (
    args: {
      data: CommunityEventUpdateInput;
      where: CommunityEventWhereUniqueInput;
    }
  ) => CommunityEventPromise;
  updateManyCommunityEvents: (
    args: {
      data: CommunityEventUpdateManyMutationInput;
      where?: CommunityEventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCommunityEvent: (
    args: {
      where: CommunityEventWhereUniqueInput;
      create: CommunityEventCreateInput;
      update: CommunityEventUpdateInput;
    }
  ) => CommunityEventPromise;
  deleteCommunityEvent: (
    where: CommunityEventWhereUniqueInput
  ) => CommunityEventPromise;
  deleteManyCommunityEvents: (
    where?: CommunityEventWhereInput
  ) => BatchPayloadPromise;
  createEventAction: (data: EventActionCreateInput) => EventActionPromise;
  updateEventAction: (
    args: { data: EventActionUpdateInput; where: EventActionWhereUniqueInput }
  ) => EventActionPromise;
  updateManyEventActions: (
    args: {
      data: EventActionUpdateManyMutationInput;
      where?: EventActionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertEventAction: (
    args: {
      where: EventActionWhereUniqueInput;
      create: EventActionCreateInput;
      update: EventActionUpdateInput;
    }
  ) => EventActionPromise;
  deleteEventAction: (where: EventActionWhereUniqueInput) => EventActionPromise;
  deleteManyEventActions: (
    where?: EventActionWhereInput
  ) => BatchPayloadPromise;
  createPetition: (data: PetitionCreateInput) => PetitionPromise;
  updatePetition: (
    args: { data: PetitionUpdateInput; where: PetitionWhereUniqueInput }
  ) => PetitionPromise;
  updateManyPetitions: (
    args: { data: PetitionUpdateManyMutationInput; where?: PetitionWhereInput }
  ) => BatchPayloadPromise;
  upsertPetition: (
    args: {
      where: PetitionWhereUniqueInput;
      create: PetitionCreateInput;
      update: PetitionUpdateInput;
    }
  ) => PetitionPromise;
  deletePetition: (where: PetitionWhereUniqueInput) => PetitionPromise;
  deleteManyPetitions: (where?: PetitionWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (
    args: { data: RoleUpdateInput; where: RoleWhereUniqueInput }
  ) => RolePromise;
  updateManyRoles: (
    args: { data: RoleUpdateManyMutationInput; where?: RoleWhereInput }
  ) => BatchPayloadPromise;
  upsertRole: (
    args: {
      where: RoleWhereUniqueInput;
      create: RoleCreateInput;
      update: RoleUpdateInput;
    }
  ) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  action: (
    where?: ActionSubscriptionWhereInput
  ) => ActionSubscriptionPayloadSubscription;
  actionCategory: (
    where?: ActionCategorySubscriptionWhereInput
  ) => ActionCategorySubscriptionPayloadSubscription;
  communityEvent: (
    where?: CommunityEventSubscriptionWhereInput
  ) => CommunityEventSubscriptionPayloadSubscription;
  eventAction: (
    where?: EventActionSubscriptionWhereInput
  ) => EventActionSubscriptionPayloadSubscription;
  petition: (
    where?: PetitionSubscriptionWhereInput
  ) => PetitionSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Schedule =
  | "ANYTIME"
  | "ONCE"
  | "DAILY"
  | "BIWEEKLY"
  | "WEEKLY"
  | "TWOWEEKS"
  | "MONTHLY"
  | "QUARTERLY"
  | "SEMIANNUALLY"
  | "ANNUALLY";

export type ActionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "primary_image_ASC"
  | "primary_image_DESC"
  | "active_ASC"
  | "active_DESC"
  | "short_description_ASC"
  | "short_description_DESC"
  | "action_taken_description_ASC"
  | "action_taken_description_DESC"
  | "schedule_ASC"
  | "schedule_DESC"
  | "video_url_ASC"
  | "video_url_DESC"
  | "carbon_dioxide_ASC"
  | "carbon_dioxide_DESC"
  | "order_ASC"
  | "order_DESC"
  | "water_ASC"
  | "water_DESC"
  | "waste_ASC"
  | "waste_DESC"
  | "points_ASC"
  | "points_DESC"
  | "external_url_ASC"
  | "external_url_DESC"
  | "isGame_ASC"
  | "isGame_DESC"
  | "game_title_ASC"
  | "game_title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EventActionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "took_action_ASC"
  | "took_action_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PetitionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "active_ASC"
  | "active_DESC"
  | "short_description_ASC"
  | "short_description_DESC"
  | "body_ASC"
  | "body_DESC"
  | "order_ASC"
  | "order_DESC"
  | "primary_image_ASC"
  | "primary_image_DESC"
  | "video_url_ASC"
  | "video_url_DESC"
  | "external_url_ASC"
  | "external_url_DESC"
  | "hasVideo_ASC"
  | "hasVideo_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "token_ASC"
  | "token_DESC"
  | "photo_ASC"
  | "photo_DESC"
  | "zipcode_ASC"
  | "zipcode_DESC"
  | "total_points_ASC"
  | "total_points_DESC"
  | "device_id_ASC"
  | "device_id_DESC"
  | "crew_type_ASC"
  | "crew_type_DESC"
  | "crew_ASC"
  | "crew_DESC"
  | "push_notifications_enabled_ASC"
  | "push_notifications_enabled_DESC"
  | "action_reminders_ASC"
  | "action_reminders_DESC"
  | "new_highlights_notification_ASC"
  | "new_highlights_notification_DESC"
  | "new_features_notification_ASC"
  | "new_features_notification_DESC"
  | "state_ASC"
  | "state_DESC"
  | "country_ASC"
  | "country_DESC"
  | "country_name_ASC"
  | "country_name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommunityEventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "number_of_people_ASC"
  | "number_of_people_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ActionCategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "primary_image_ASC"
  | "primary_image_DESC"
  | "video_id_ASC"
  | "video_id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type RoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "role_name_ASC"
  | "role_name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ActionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ActionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  category?: ActionCategoryWhereInput;
  primary_image?: String;
  primary_image_not?: String;
  primary_image_in?: String[] | String;
  primary_image_not_in?: String[] | String;
  primary_image_lt?: String;
  primary_image_lte?: String;
  primary_image_gt?: String;
  primary_image_gte?: String;
  primary_image_contains?: String;
  primary_image_not_contains?: String;
  primary_image_starts_with?: String;
  primary_image_not_starts_with?: String;
  primary_image_ends_with?: String;
  primary_image_not_ends_with?: String;
  active?: Boolean;
  active_not?: Boolean;
  short_description?: String;
  short_description_not?: String;
  short_description_in?: String[] | String;
  short_description_not_in?: String[] | String;
  short_description_lt?: String;
  short_description_lte?: String;
  short_description_gt?: String;
  short_description_gte?: String;
  short_description_contains?: String;
  short_description_not_contains?: String;
  short_description_starts_with?: String;
  short_description_not_starts_with?: String;
  short_description_ends_with?: String;
  short_description_not_ends_with?: String;
  action_taken_description?: String;
  action_taken_description_not?: String;
  action_taken_description_in?: String[] | String;
  action_taken_description_not_in?: String[] | String;
  action_taken_description_lt?: String;
  action_taken_description_lte?: String;
  action_taken_description_gt?: String;
  action_taken_description_gte?: String;
  action_taken_description_contains?: String;
  action_taken_description_not_contains?: String;
  action_taken_description_starts_with?: String;
  action_taken_description_not_starts_with?: String;
  action_taken_description_ends_with?: String;
  action_taken_description_not_ends_with?: String;
  schedule?: Schedule;
  schedule_not?: Schedule;
  schedule_in?: Schedule[] | Schedule;
  schedule_not_in?: Schedule[] | Schedule;
  video_url?: String;
  video_url_not?: String;
  video_url_in?: String[] | String;
  video_url_not_in?: String[] | String;
  video_url_lt?: String;
  video_url_lte?: String;
  video_url_gt?: String;
  video_url_gte?: String;
  video_url_contains?: String;
  video_url_not_contains?: String;
  video_url_starts_with?: String;
  video_url_not_starts_with?: String;
  video_url_ends_with?: String;
  video_url_not_ends_with?: String;
  carbon_dioxide?: Float;
  carbon_dioxide_not?: Float;
  carbon_dioxide_in?: Float[] | Float;
  carbon_dioxide_not_in?: Float[] | Float;
  carbon_dioxide_lt?: Float;
  carbon_dioxide_lte?: Float;
  carbon_dioxide_gt?: Float;
  carbon_dioxide_gte?: Float;
  order?: Int;
  order_not?: Int;
  order_in?: Int[] | Int;
  order_not_in?: Int[] | Int;
  order_lt?: Int;
  order_lte?: Int;
  order_gt?: Int;
  order_gte?: Int;
  water?: Float;
  water_not?: Float;
  water_in?: Float[] | Float;
  water_not_in?: Float[] | Float;
  water_lt?: Float;
  water_lte?: Float;
  water_gt?: Float;
  water_gte?: Float;
  waste?: Float;
  waste_not?: Float;
  waste_in?: Float[] | Float;
  waste_not_in?: Float[] | Float;
  waste_lt?: Float;
  waste_lte?: Float;
  waste_gt?: Float;
  waste_gte?: Float;
  points?: Int;
  points_not?: Int;
  points_in?: Int[] | Int;
  points_not_in?: Int[] | Int;
  points_lt?: Int;
  points_lte?: Int;
  points_gt?: Int;
  points_gte?: Int;
  external_url?: String;
  external_url_not?: String;
  external_url_in?: String[] | String;
  external_url_not_in?: String[] | String;
  external_url_lt?: String;
  external_url_lte?: String;
  external_url_gt?: String;
  external_url_gte?: String;
  external_url_contains?: String;
  external_url_not_contains?: String;
  external_url_starts_with?: String;
  external_url_not_starts_with?: String;
  external_url_ends_with?: String;
  external_url_not_ends_with?: String;
  isGame?: Boolean;
  isGame_not?: Boolean;
  game_title?: String;
  game_title_not?: String;
  game_title_in?: String[] | String;
  game_title_not_in?: String[] | String;
  game_title_lt?: String;
  game_title_lte?: String;
  game_title_gt?: String;
  game_title_gte?: String;
  game_title_contains?: String;
  game_title_not_contains?: String;
  game_title_starts_with?: String;
  game_title_not_starts_with?: String;
  game_title_ends_with?: String;
  game_title_not_ends_with?: String;
  related_actions_every?: ActionWhereInput;
  related_actions_some?: ActionWhereInput;
  related_actions_none?: ActionWhereInput;
  author?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ActionWhereInput[] | ActionWhereInput;
  OR?: ActionWhereInput[] | ActionWhereInput;
  NOT?: ActionWhereInput[] | ActionWhereInput;
}

export interface ActionCategoryWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  actions_every?: ActionWhereInput;
  actions_some?: ActionWhereInput;
  actions_none?: ActionWhereInput;
  primary_image?: String;
  primary_image_not?: String;
  primary_image_in?: String[] | String;
  primary_image_not_in?: String[] | String;
  primary_image_lt?: String;
  primary_image_lte?: String;
  primary_image_gt?: String;
  primary_image_gte?: String;
  primary_image_contains?: String;
  primary_image_not_contains?: String;
  primary_image_starts_with?: String;
  primary_image_not_starts_with?: String;
  primary_image_ends_with?: String;
  primary_image_not_ends_with?: String;
  video_id?: String;
  video_id_not?: String;
  video_id_in?: String[] | String;
  video_id_not_in?: String[] | String;
  video_id_lt?: String;
  video_id_lte?: String;
  video_id_gt?: String;
  video_id_gte?: String;
  video_id_contains?: String;
  video_id_not_contains?: String;
  video_id_starts_with?: String;
  video_id_not_starts_with?: String;
  video_id_ends_with?: String;
  video_id_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ActionCategoryWhereInput[] | ActionCategoryWhereInput;
  OR?: ActionCategoryWhereInput[] | ActionCategoryWhereInput;
  NOT?: ActionCategoryWhereInput[] | ActionCategoryWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  photo?: String;
  photo_not?: String;
  photo_in?: String[] | String;
  photo_not_in?: String[] | String;
  photo_lt?: String;
  photo_lte?: String;
  photo_gt?: String;
  photo_gte?: String;
  photo_contains?: String;
  photo_not_contains?: String;
  photo_starts_with?: String;
  photo_not_starts_with?: String;
  photo_ends_with?: String;
  photo_not_ends_with?: String;
  role?: RoleWhereInput;
  zipcode?: String;
  zipcode_not?: String;
  zipcode_in?: String[] | String;
  zipcode_not_in?: String[] | String;
  zipcode_lt?: String;
  zipcode_lte?: String;
  zipcode_gt?: String;
  zipcode_gte?: String;
  zipcode_contains?: String;
  zipcode_not_contains?: String;
  zipcode_starts_with?: String;
  zipcode_not_starts_with?: String;
  zipcode_ends_with?: String;
  zipcode_not_ends_with?: String;
  recent_actions_every?: EventActionWhereInput;
  recent_actions_some?: EventActionWhereInput;
  recent_actions_none?: EventActionWhereInput;
  total_points?: Int;
  total_points_not?: Int;
  total_points_in?: Int[] | Int;
  total_points_not_in?: Int[] | Int;
  total_points_lt?: Int;
  total_points_lte?: Int;
  total_points_gt?: Int;
  total_points_gte?: Int;
  petitions_signed_every?: PetitionWhereInput;
  petitions_signed_some?: PetitionWhereInput;
  petitions_signed_none?: PetitionWhereInput;
  community_events_every?: CommunityEventWhereInput;
  community_events_some?: CommunityEventWhereInput;
  community_events_none?: CommunityEventWhereInput;
  device_id?: String;
  device_id_not?: String;
  device_id_in?: String[] | String;
  device_id_not_in?: String[] | String;
  device_id_lt?: String;
  device_id_lte?: String;
  device_id_gt?: String;
  device_id_gte?: String;
  device_id_contains?: String;
  device_id_not_contains?: String;
  device_id_starts_with?: String;
  device_id_not_starts_with?: String;
  device_id_ends_with?: String;
  device_id_not_ends_with?: String;
  crew_type?: String;
  crew_type_not?: String;
  crew_type_in?: String[] | String;
  crew_type_not_in?: String[] | String;
  crew_type_lt?: String;
  crew_type_lte?: String;
  crew_type_gt?: String;
  crew_type_gte?: String;
  crew_type_contains?: String;
  crew_type_not_contains?: String;
  crew_type_starts_with?: String;
  crew_type_not_starts_with?: String;
  crew_type_ends_with?: String;
  crew_type_not_ends_with?: String;
  crew?: String;
  crew_not?: String;
  crew_in?: String[] | String;
  crew_not_in?: String[] | String;
  crew_lt?: String;
  crew_lte?: String;
  crew_gt?: String;
  crew_gte?: String;
  crew_contains?: String;
  crew_not_contains?: String;
  crew_starts_with?: String;
  crew_not_starts_with?: String;
  crew_ends_with?: String;
  crew_not_ends_with?: String;
  push_notifications_enabled?: Boolean;
  push_notifications_enabled_not?: Boolean;
  action_reminders?: Boolean;
  action_reminders_not?: Boolean;
  new_highlights_notification?: Boolean;
  new_highlights_notification_not?: Boolean;
  new_features_notification?: Boolean;
  new_features_notification_not?: Boolean;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  country_name?: String;
  country_name_not?: String;
  country_name_in?: String[] | String;
  country_name_not_in?: String[] | String;
  country_name_lt?: String;
  country_name_lte?: String;
  country_name_gt?: String;
  country_name_gte?: String;
  country_name_contains?: String;
  country_name_not_contains?: String;
  country_name_starts_with?: String;
  country_name_not_starts_with?: String;
  country_name_ends_with?: String;
  country_name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface RoleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  role_name?: String;
  role_name_not?: String;
  role_name_in?: String[] | String;
  role_name_not_in?: String[] | String;
  role_name_lt?: String;
  role_name_lte?: String;
  role_name_gt?: String;
  role_name_gte?: String;
  role_name_contains?: String;
  role_name_not_contains?: String;
  role_name_starts_with?: String;
  role_name_not_starts_with?: String;
  role_name_ends_with?: String;
  role_name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: RoleWhereInput[] | RoleWhereInput;
  OR?: RoleWhereInput[] | RoleWhereInput;
  NOT?: RoleWhereInput[] | RoleWhereInput;
}

export interface EventActionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  action?: ActionWhereInput;
  user?: UserWhereInput;
  took_action?: Boolean;
  took_action_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: EventActionWhereInput[] | EventActionWhereInput;
  OR?: EventActionWhereInput[] | EventActionWhereInput;
  NOT?: EventActionWhereInput[] | EventActionWhereInput;
}

export interface PetitionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  active?: Boolean;
  active_not?: Boolean;
  short_description?: String;
  short_description_not?: String;
  short_description_in?: String[] | String;
  short_description_not_in?: String[] | String;
  short_description_lt?: String;
  short_description_lte?: String;
  short_description_gt?: String;
  short_description_gte?: String;
  short_description_contains?: String;
  short_description_not_contains?: String;
  short_description_starts_with?: String;
  short_description_not_starts_with?: String;
  short_description_ends_with?: String;
  short_description_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  order?: Int;
  order_not?: Int;
  order_in?: Int[] | Int;
  order_not_in?: Int[] | Int;
  order_lt?: Int;
  order_lte?: Int;
  order_gt?: Int;
  order_gte?: Int;
  primary_image?: String;
  primary_image_not?: String;
  primary_image_in?: String[] | String;
  primary_image_not_in?: String[] | String;
  primary_image_lt?: String;
  primary_image_lte?: String;
  primary_image_gt?: String;
  primary_image_gte?: String;
  primary_image_contains?: String;
  primary_image_not_contains?: String;
  primary_image_starts_with?: String;
  primary_image_not_starts_with?: String;
  primary_image_ends_with?: String;
  primary_image_not_ends_with?: String;
  video_url?: String;
  video_url_not?: String;
  video_url_in?: String[] | String;
  video_url_not_in?: String[] | String;
  video_url_lt?: String;
  video_url_lte?: String;
  video_url_gt?: String;
  video_url_gte?: String;
  video_url_contains?: String;
  video_url_not_contains?: String;
  video_url_starts_with?: String;
  video_url_not_starts_with?: String;
  video_url_ends_with?: String;
  video_url_not_ends_with?: String;
  external_url?: String;
  external_url_not?: String;
  external_url_in?: String[] | String;
  external_url_not_in?: String[] | String;
  external_url_lt?: String;
  external_url_lte?: String;
  external_url_gt?: String;
  external_url_gte?: String;
  external_url_contains?: String;
  external_url_not_contains?: String;
  external_url_starts_with?: String;
  external_url_not_starts_with?: String;
  external_url_ends_with?: String;
  external_url_not_ends_with?: String;
  hasVideo?: Boolean;
  hasVideo_not?: Boolean;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  author?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PetitionWhereInput[] | PetitionWhereInput;
  OR?: PetitionWhereInput[] | PetitionWhereInput;
  NOT?: PetitionWhereInput[] | PetitionWhereInput;
}

export interface CommunityEventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  number_of_people?: Int;
  number_of_people_not?: Int;
  number_of_people_in?: Int[] | Int;
  number_of_people_not_in?: Int[] | Int;
  number_of_people_lt?: Int;
  number_of_people_lte?: Int;
  number_of_people_gt?: Int;
  number_of_people_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: CommunityEventWhereInput[] | CommunityEventWhereInput;
  OR?: CommunityEventWhereInput[] | CommunityEventWhereInput;
  NOT?: CommunityEventWhereInput[] | CommunityEventWhereInput;
}

export type ActionCategoryWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type CommunityEventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type EventActionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type PetitionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type RoleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  username?: String;
  email?: String;
  phone?: String;
}>;

export interface ActionCreateInput {
  category?: ActionCategoryCreateOneWithoutActionsInput;
  primary_image?: String;
  active?: Boolean;
  short_description: String;
  action_taken_description: String;
  schedule?: Schedule;
  video_url?: String;
  carbon_dioxide?: Float;
  order?: Int;
  water?: Float;
  waste?: Float;
  points?: Int;
  external_url?: String;
  isGame?: Boolean;
  game_title?: String;
  related_actions?: ActionCreateManyInput;
  author: UserCreateOneInput;
}

export interface ActionCategoryCreateOneWithoutActionsInput {
  create?: ActionCategoryCreateWithoutActionsInput;
  connect?: ActionCategoryWhereUniqueInput;
}

export interface ActionCategoryCreateWithoutActionsInput {
  name: String;
  primary_image?: String;
  video_id?: String;
}

export interface ActionCreateManyInput {
  create?: ActionCreateInput[] | ActionCreateInput;
  connect?: ActionWhereUniqueInput[] | ActionWhereUniqueInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateInput {
  username?: String;
  email?: String;
  password: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  role?: RoleCreateOneInput;
  zipcode?: String;
  recent_actions?: EventActionCreateManyWithoutUserInput;
  total_points?: Int;
  petitions_signed?: PetitionCreateManyWithoutUsersInput;
  community_events?: CommunityEventCreateManyInput;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
}

export interface RoleCreateOneInput {
  create?: RoleCreateInput;
  connect?: RoleWhereUniqueInput;
}

export interface RoleCreateInput {
  role_name: String;
}

export interface EventActionCreateManyWithoutUserInput {
  create?:
    | EventActionCreateWithoutUserInput[]
    | EventActionCreateWithoutUserInput;
  connect?: EventActionWhereUniqueInput[] | EventActionWhereUniqueInput;
}

export interface EventActionCreateWithoutUserInput {
  action: ActionCreateOneInput;
  took_action?: Boolean;
}

export interface ActionCreateOneInput {
  create?: ActionCreateInput;
  connect?: ActionWhereUniqueInput;
}

export interface PetitionCreateManyWithoutUsersInput {
  create?: PetitionCreateWithoutUsersInput[] | PetitionCreateWithoutUsersInput;
  connect?: PetitionWhereUniqueInput[] | PetitionWhereUniqueInput;
}

export interface PetitionCreateWithoutUsersInput {
  title: String;
  active?: Boolean;
  short_description: String;
  body: String;
  order?: Int;
  primary_image?: String;
  video_url?: String;
  external_url?: String;
  hasVideo?: Boolean;
  author: UserCreateOneInput;
}

export interface CommunityEventCreateManyInput {
  create?: CommunityEventCreateInput[] | CommunityEventCreateInput;
  connect?: CommunityEventWhereUniqueInput[] | CommunityEventWhereUniqueInput;
}

export interface CommunityEventCreateInput {
  type: String;
  number_of_people: Int;
}

export interface ActionUpdateInput {
  category?: ActionCategoryUpdateOneWithoutActionsInput;
  primary_image?: String;
  active?: Boolean;
  short_description?: String;
  action_taken_description?: String;
  schedule?: Schedule;
  video_url?: String;
  carbon_dioxide?: Float;
  order?: Int;
  water?: Float;
  waste?: Float;
  points?: Int;
  external_url?: String;
  isGame?: Boolean;
  game_title?: String;
  related_actions?: ActionUpdateManyInput;
  author?: UserUpdateOneRequiredInput;
}

export interface ActionCategoryUpdateOneWithoutActionsInput {
  create?: ActionCategoryCreateWithoutActionsInput;
  update?: ActionCategoryUpdateWithoutActionsDataInput;
  upsert?: ActionCategoryUpsertWithoutActionsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ActionCategoryWhereUniqueInput;
}

export interface ActionCategoryUpdateWithoutActionsDataInput {
  name?: String;
  primary_image?: String;
  video_id?: String;
}

export interface ActionCategoryUpsertWithoutActionsInput {
  update: ActionCategoryUpdateWithoutActionsDataInput;
  create: ActionCategoryCreateWithoutActionsInput;
}

export interface ActionUpdateManyInput {
  create?: ActionCreateInput[] | ActionCreateInput;
  update?:
    | ActionUpdateWithWhereUniqueNestedInput[]
    | ActionUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ActionUpsertWithWhereUniqueNestedInput[]
    | ActionUpsertWithWhereUniqueNestedInput;
  delete?: ActionWhereUniqueInput[] | ActionWhereUniqueInput;
  connect?: ActionWhereUniqueInput[] | ActionWhereUniqueInput;
  disconnect?: ActionWhereUniqueInput[] | ActionWhereUniqueInput;
  deleteMany?: ActionScalarWhereInput[] | ActionScalarWhereInput;
  updateMany?:
    | ActionUpdateManyWithWhereNestedInput[]
    | ActionUpdateManyWithWhereNestedInput;
}

export interface ActionUpdateWithWhereUniqueNestedInput {
  where: ActionWhereUniqueInput;
  data: ActionUpdateDataInput;
}

export interface ActionUpdateDataInput {
  category?: ActionCategoryUpdateOneWithoutActionsInput;
  primary_image?: String;
  active?: Boolean;
  short_description?: String;
  action_taken_description?: String;
  schedule?: Schedule;
  video_url?: String;
  carbon_dioxide?: Float;
  order?: Int;
  water?: Float;
  waste?: Float;
  points?: Int;
  external_url?: String;
  isGame?: Boolean;
  game_title?: String;
  related_actions?: ActionUpdateManyInput;
  author?: UserUpdateOneRequiredInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  username?: String;
  email?: String;
  password?: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  role?: RoleUpdateOneInput;
  zipcode?: String;
  recent_actions?: EventActionUpdateManyWithoutUserInput;
  total_points?: Int;
  petitions_signed?: PetitionUpdateManyWithoutUsersInput;
  community_events?: CommunityEventUpdateManyInput;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
}

export interface RoleUpdateOneInput {
  create?: RoleCreateInput;
  update?: RoleUpdateDataInput;
  upsert?: RoleUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: RoleWhereUniqueInput;
}

export interface RoleUpdateDataInput {
  role_name?: String;
}

export interface RoleUpsertNestedInput {
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface EventActionUpdateManyWithoutUserInput {
  create?:
    | EventActionCreateWithoutUserInput[]
    | EventActionCreateWithoutUserInput;
  delete?: EventActionWhereUniqueInput[] | EventActionWhereUniqueInput;
  connect?: EventActionWhereUniqueInput[] | EventActionWhereUniqueInput;
  disconnect?: EventActionWhereUniqueInput[] | EventActionWhereUniqueInput;
  update?:
    | EventActionUpdateWithWhereUniqueWithoutUserInput[]
    | EventActionUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | EventActionUpsertWithWhereUniqueWithoutUserInput[]
    | EventActionUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: EventActionScalarWhereInput[] | EventActionScalarWhereInput;
  updateMany?:
    | EventActionUpdateManyWithWhereNestedInput[]
    | EventActionUpdateManyWithWhereNestedInput;
}

export interface EventActionUpdateWithWhereUniqueWithoutUserInput {
  where: EventActionWhereUniqueInput;
  data: EventActionUpdateWithoutUserDataInput;
}

export interface EventActionUpdateWithoutUserDataInput {
  action?: ActionUpdateOneRequiredInput;
  took_action?: Boolean;
}

export interface ActionUpdateOneRequiredInput {
  create?: ActionCreateInput;
  update?: ActionUpdateDataInput;
  upsert?: ActionUpsertNestedInput;
  connect?: ActionWhereUniqueInput;
}

export interface ActionUpsertNestedInput {
  update: ActionUpdateDataInput;
  create: ActionCreateInput;
}

export interface EventActionUpsertWithWhereUniqueWithoutUserInput {
  where: EventActionWhereUniqueInput;
  update: EventActionUpdateWithoutUserDataInput;
  create: EventActionCreateWithoutUserInput;
}

export interface EventActionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  took_action?: Boolean;
  took_action_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: EventActionScalarWhereInput[] | EventActionScalarWhereInput;
  OR?: EventActionScalarWhereInput[] | EventActionScalarWhereInput;
  NOT?: EventActionScalarWhereInput[] | EventActionScalarWhereInput;
}

export interface EventActionUpdateManyWithWhereNestedInput {
  where: EventActionScalarWhereInput;
  data: EventActionUpdateManyDataInput;
}

export interface EventActionUpdateManyDataInput {
  took_action?: Boolean;
}

export interface PetitionUpdateManyWithoutUsersInput {
  create?: PetitionCreateWithoutUsersInput[] | PetitionCreateWithoutUsersInput;
  delete?: PetitionWhereUniqueInput[] | PetitionWhereUniqueInput;
  connect?: PetitionWhereUniqueInput[] | PetitionWhereUniqueInput;
  disconnect?: PetitionWhereUniqueInput[] | PetitionWhereUniqueInput;
  update?:
    | PetitionUpdateWithWhereUniqueWithoutUsersInput[]
    | PetitionUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | PetitionUpsertWithWhereUniqueWithoutUsersInput[]
    | PetitionUpsertWithWhereUniqueWithoutUsersInput;
  deleteMany?: PetitionScalarWhereInput[] | PetitionScalarWhereInput;
  updateMany?:
    | PetitionUpdateManyWithWhereNestedInput[]
    | PetitionUpdateManyWithWhereNestedInput;
}

export interface PetitionUpdateWithWhereUniqueWithoutUsersInput {
  where: PetitionWhereUniqueInput;
  data: PetitionUpdateWithoutUsersDataInput;
}

export interface PetitionUpdateWithoutUsersDataInput {
  title?: String;
  active?: Boolean;
  short_description?: String;
  body?: String;
  order?: Int;
  primary_image?: String;
  video_url?: String;
  external_url?: String;
  hasVideo?: Boolean;
  author?: UserUpdateOneRequiredInput;
}

export interface PetitionUpsertWithWhereUniqueWithoutUsersInput {
  where: PetitionWhereUniqueInput;
  update: PetitionUpdateWithoutUsersDataInput;
  create: PetitionCreateWithoutUsersInput;
}

export interface PetitionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  active?: Boolean;
  active_not?: Boolean;
  short_description?: String;
  short_description_not?: String;
  short_description_in?: String[] | String;
  short_description_not_in?: String[] | String;
  short_description_lt?: String;
  short_description_lte?: String;
  short_description_gt?: String;
  short_description_gte?: String;
  short_description_contains?: String;
  short_description_not_contains?: String;
  short_description_starts_with?: String;
  short_description_not_starts_with?: String;
  short_description_ends_with?: String;
  short_description_not_ends_with?: String;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  order?: Int;
  order_not?: Int;
  order_in?: Int[] | Int;
  order_not_in?: Int[] | Int;
  order_lt?: Int;
  order_lte?: Int;
  order_gt?: Int;
  order_gte?: Int;
  primary_image?: String;
  primary_image_not?: String;
  primary_image_in?: String[] | String;
  primary_image_not_in?: String[] | String;
  primary_image_lt?: String;
  primary_image_lte?: String;
  primary_image_gt?: String;
  primary_image_gte?: String;
  primary_image_contains?: String;
  primary_image_not_contains?: String;
  primary_image_starts_with?: String;
  primary_image_not_starts_with?: String;
  primary_image_ends_with?: String;
  primary_image_not_ends_with?: String;
  video_url?: String;
  video_url_not?: String;
  video_url_in?: String[] | String;
  video_url_not_in?: String[] | String;
  video_url_lt?: String;
  video_url_lte?: String;
  video_url_gt?: String;
  video_url_gte?: String;
  video_url_contains?: String;
  video_url_not_contains?: String;
  video_url_starts_with?: String;
  video_url_not_starts_with?: String;
  video_url_ends_with?: String;
  video_url_not_ends_with?: String;
  external_url?: String;
  external_url_not?: String;
  external_url_in?: String[] | String;
  external_url_not_in?: String[] | String;
  external_url_lt?: String;
  external_url_lte?: String;
  external_url_gt?: String;
  external_url_gte?: String;
  external_url_contains?: String;
  external_url_not_contains?: String;
  external_url_starts_with?: String;
  external_url_not_starts_with?: String;
  external_url_ends_with?: String;
  external_url_not_ends_with?: String;
  hasVideo?: Boolean;
  hasVideo_not?: Boolean;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: PetitionScalarWhereInput[] | PetitionScalarWhereInput;
  OR?: PetitionScalarWhereInput[] | PetitionScalarWhereInput;
  NOT?: PetitionScalarWhereInput[] | PetitionScalarWhereInput;
}

export interface PetitionUpdateManyWithWhereNestedInput {
  where: PetitionScalarWhereInput;
  data: PetitionUpdateManyDataInput;
}

export interface PetitionUpdateManyDataInput {
  title?: String;
  active?: Boolean;
  short_description?: String;
  body?: String;
  order?: Int;
  primary_image?: String;
  video_url?: String;
  external_url?: String;
  hasVideo?: Boolean;
}

export interface CommunityEventUpdateManyInput {
  create?: CommunityEventCreateInput[] | CommunityEventCreateInput;
  update?:
    | CommunityEventUpdateWithWhereUniqueNestedInput[]
    | CommunityEventUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CommunityEventUpsertWithWhereUniqueNestedInput[]
    | CommunityEventUpsertWithWhereUniqueNestedInput;
  delete?: CommunityEventWhereUniqueInput[] | CommunityEventWhereUniqueInput;
  connect?: CommunityEventWhereUniqueInput[] | CommunityEventWhereUniqueInput;
  disconnect?:
    | CommunityEventWhereUniqueInput[]
    | CommunityEventWhereUniqueInput;
  deleteMany?:
    | CommunityEventScalarWhereInput[]
    | CommunityEventScalarWhereInput;
  updateMany?:
    | CommunityEventUpdateManyWithWhereNestedInput[]
    | CommunityEventUpdateManyWithWhereNestedInput;
}

export interface CommunityEventUpdateWithWhereUniqueNestedInput {
  where: CommunityEventWhereUniqueInput;
  data: CommunityEventUpdateDataInput;
}

export interface CommunityEventUpdateDataInput {
  type?: String;
  number_of_people?: Int;
}

export interface CommunityEventUpsertWithWhereUniqueNestedInput {
  where: CommunityEventWhereUniqueInput;
  update: CommunityEventUpdateDataInput;
  create: CommunityEventCreateInput;
}

export interface CommunityEventScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  type?: String;
  type_not?: String;
  type_in?: String[] | String;
  type_not_in?: String[] | String;
  type_lt?: String;
  type_lte?: String;
  type_gt?: String;
  type_gte?: String;
  type_contains?: String;
  type_not_contains?: String;
  type_starts_with?: String;
  type_not_starts_with?: String;
  type_ends_with?: String;
  type_not_ends_with?: String;
  number_of_people?: Int;
  number_of_people_not?: Int;
  number_of_people_in?: Int[] | Int;
  number_of_people_not_in?: Int[] | Int;
  number_of_people_lt?: Int;
  number_of_people_lte?: Int;
  number_of_people_gt?: Int;
  number_of_people_gte?: Int;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: CommunityEventScalarWhereInput[] | CommunityEventScalarWhereInput;
  OR?: CommunityEventScalarWhereInput[] | CommunityEventScalarWhereInput;
  NOT?: CommunityEventScalarWhereInput[] | CommunityEventScalarWhereInput;
}

export interface CommunityEventUpdateManyWithWhereNestedInput {
  where: CommunityEventScalarWhereInput;
  data: CommunityEventUpdateManyDataInput;
}

export interface CommunityEventUpdateManyDataInput {
  type?: String;
  number_of_people?: Int;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ActionUpsertWithWhereUniqueNestedInput {
  where: ActionWhereUniqueInput;
  update: ActionUpdateDataInput;
  create: ActionCreateInput;
}

export interface ActionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  primary_image?: String;
  primary_image_not?: String;
  primary_image_in?: String[] | String;
  primary_image_not_in?: String[] | String;
  primary_image_lt?: String;
  primary_image_lte?: String;
  primary_image_gt?: String;
  primary_image_gte?: String;
  primary_image_contains?: String;
  primary_image_not_contains?: String;
  primary_image_starts_with?: String;
  primary_image_not_starts_with?: String;
  primary_image_ends_with?: String;
  primary_image_not_ends_with?: String;
  active?: Boolean;
  active_not?: Boolean;
  short_description?: String;
  short_description_not?: String;
  short_description_in?: String[] | String;
  short_description_not_in?: String[] | String;
  short_description_lt?: String;
  short_description_lte?: String;
  short_description_gt?: String;
  short_description_gte?: String;
  short_description_contains?: String;
  short_description_not_contains?: String;
  short_description_starts_with?: String;
  short_description_not_starts_with?: String;
  short_description_ends_with?: String;
  short_description_not_ends_with?: String;
  action_taken_description?: String;
  action_taken_description_not?: String;
  action_taken_description_in?: String[] | String;
  action_taken_description_not_in?: String[] | String;
  action_taken_description_lt?: String;
  action_taken_description_lte?: String;
  action_taken_description_gt?: String;
  action_taken_description_gte?: String;
  action_taken_description_contains?: String;
  action_taken_description_not_contains?: String;
  action_taken_description_starts_with?: String;
  action_taken_description_not_starts_with?: String;
  action_taken_description_ends_with?: String;
  action_taken_description_not_ends_with?: String;
  schedule?: Schedule;
  schedule_not?: Schedule;
  schedule_in?: Schedule[] | Schedule;
  schedule_not_in?: Schedule[] | Schedule;
  video_url?: String;
  video_url_not?: String;
  video_url_in?: String[] | String;
  video_url_not_in?: String[] | String;
  video_url_lt?: String;
  video_url_lte?: String;
  video_url_gt?: String;
  video_url_gte?: String;
  video_url_contains?: String;
  video_url_not_contains?: String;
  video_url_starts_with?: String;
  video_url_not_starts_with?: String;
  video_url_ends_with?: String;
  video_url_not_ends_with?: String;
  carbon_dioxide?: Float;
  carbon_dioxide_not?: Float;
  carbon_dioxide_in?: Float[] | Float;
  carbon_dioxide_not_in?: Float[] | Float;
  carbon_dioxide_lt?: Float;
  carbon_dioxide_lte?: Float;
  carbon_dioxide_gt?: Float;
  carbon_dioxide_gte?: Float;
  order?: Int;
  order_not?: Int;
  order_in?: Int[] | Int;
  order_not_in?: Int[] | Int;
  order_lt?: Int;
  order_lte?: Int;
  order_gt?: Int;
  order_gte?: Int;
  water?: Float;
  water_not?: Float;
  water_in?: Float[] | Float;
  water_not_in?: Float[] | Float;
  water_lt?: Float;
  water_lte?: Float;
  water_gt?: Float;
  water_gte?: Float;
  waste?: Float;
  waste_not?: Float;
  waste_in?: Float[] | Float;
  waste_not_in?: Float[] | Float;
  waste_lt?: Float;
  waste_lte?: Float;
  waste_gt?: Float;
  waste_gte?: Float;
  points?: Int;
  points_not?: Int;
  points_in?: Int[] | Int;
  points_not_in?: Int[] | Int;
  points_lt?: Int;
  points_lte?: Int;
  points_gt?: Int;
  points_gte?: Int;
  external_url?: String;
  external_url_not?: String;
  external_url_in?: String[] | String;
  external_url_not_in?: String[] | String;
  external_url_lt?: String;
  external_url_lte?: String;
  external_url_gt?: String;
  external_url_gte?: String;
  external_url_contains?: String;
  external_url_not_contains?: String;
  external_url_starts_with?: String;
  external_url_not_starts_with?: String;
  external_url_ends_with?: String;
  external_url_not_ends_with?: String;
  isGame?: Boolean;
  isGame_not?: Boolean;
  game_title?: String;
  game_title_not?: String;
  game_title_in?: String[] | String;
  game_title_not_in?: String[] | String;
  game_title_lt?: String;
  game_title_lte?: String;
  game_title_gt?: String;
  game_title_gte?: String;
  game_title_contains?: String;
  game_title_not_contains?: String;
  game_title_starts_with?: String;
  game_title_not_starts_with?: String;
  game_title_ends_with?: String;
  game_title_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: ActionScalarWhereInput[] | ActionScalarWhereInput;
  OR?: ActionScalarWhereInput[] | ActionScalarWhereInput;
  NOT?: ActionScalarWhereInput[] | ActionScalarWhereInput;
}

export interface ActionUpdateManyWithWhereNestedInput {
  where: ActionScalarWhereInput;
  data: ActionUpdateManyDataInput;
}

export interface ActionUpdateManyDataInput {
  primary_image?: String;
  active?: Boolean;
  short_description?: String;
  action_taken_description?: String;
  schedule?: Schedule;
  video_url?: String;
  carbon_dioxide?: Float;
  order?: Int;
  water?: Float;
  waste?: Float;
  points?: Int;
  external_url?: String;
  isGame?: Boolean;
  game_title?: String;
}

export interface ActionUpdateManyMutationInput {
  primary_image?: String;
  active?: Boolean;
  short_description?: String;
  action_taken_description?: String;
  schedule?: Schedule;
  video_url?: String;
  carbon_dioxide?: Float;
  order?: Int;
  water?: Float;
  waste?: Float;
  points?: Int;
  external_url?: String;
  isGame?: Boolean;
  game_title?: String;
}

export interface ActionCategoryCreateInput {
  name: String;
  actions?: ActionCreateManyWithoutCategoryInput;
  primary_image?: String;
  video_id?: String;
}

export interface ActionCreateManyWithoutCategoryInput {
  create?:
    | ActionCreateWithoutCategoryInput[]
    | ActionCreateWithoutCategoryInput;
  connect?: ActionWhereUniqueInput[] | ActionWhereUniqueInput;
}

export interface ActionCreateWithoutCategoryInput {
  primary_image?: String;
  active?: Boolean;
  short_description: String;
  action_taken_description: String;
  schedule?: Schedule;
  video_url?: String;
  carbon_dioxide?: Float;
  order?: Int;
  water?: Float;
  waste?: Float;
  points?: Int;
  external_url?: String;
  isGame?: Boolean;
  game_title?: String;
  related_actions?: ActionCreateManyInput;
  author: UserCreateOneInput;
}

export interface ActionCategoryUpdateInput {
  name?: String;
  actions?: ActionUpdateManyWithoutCategoryInput;
  primary_image?: String;
  video_id?: String;
}

export interface ActionUpdateManyWithoutCategoryInput {
  create?:
    | ActionCreateWithoutCategoryInput[]
    | ActionCreateWithoutCategoryInput;
  delete?: ActionWhereUniqueInput[] | ActionWhereUniqueInput;
  connect?: ActionWhereUniqueInput[] | ActionWhereUniqueInput;
  disconnect?: ActionWhereUniqueInput[] | ActionWhereUniqueInput;
  update?:
    | ActionUpdateWithWhereUniqueWithoutCategoryInput[]
    | ActionUpdateWithWhereUniqueWithoutCategoryInput;
  upsert?:
    | ActionUpsertWithWhereUniqueWithoutCategoryInput[]
    | ActionUpsertWithWhereUniqueWithoutCategoryInput;
  deleteMany?: ActionScalarWhereInput[] | ActionScalarWhereInput;
  updateMany?:
    | ActionUpdateManyWithWhereNestedInput[]
    | ActionUpdateManyWithWhereNestedInput;
}

export interface ActionUpdateWithWhereUniqueWithoutCategoryInput {
  where: ActionWhereUniqueInput;
  data: ActionUpdateWithoutCategoryDataInput;
}

export interface ActionUpdateWithoutCategoryDataInput {
  primary_image?: String;
  active?: Boolean;
  short_description?: String;
  action_taken_description?: String;
  schedule?: Schedule;
  video_url?: String;
  carbon_dioxide?: Float;
  order?: Int;
  water?: Float;
  waste?: Float;
  points?: Int;
  external_url?: String;
  isGame?: Boolean;
  game_title?: String;
  related_actions?: ActionUpdateManyInput;
  author?: UserUpdateOneRequiredInput;
}

export interface ActionUpsertWithWhereUniqueWithoutCategoryInput {
  where: ActionWhereUniqueInput;
  update: ActionUpdateWithoutCategoryDataInput;
  create: ActionCreateWithoutCategoryInput;
}

export interface ActionCategoryUpdateManyMutationInput {
  name?: String;
  primary_image?: String;
  video_id?: String;
}

export interface CommunityEventUpdateInput {
  type?: String;
  number_of_people?: Int;
}

export interface CommunityEventUpdateManyMutationInput {
  type?: String;
  number_of_people?: Int;
}

export interface EventActionCreateInput {
  action: ActionCreateOneInput;
  user: UserCreateOneWithoutRecent_actionsInput;
  took_action?: Boolean;
}

export interface UserCreateOneWithoutRecent_actionsInput {
  create?: UserCreateWithoutRecent_actionsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutRecent_actionsInput {
  username?: String;
  email?: String;
  password: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  role?: RoleCreateOneInput;
  zipcode?: String;
  total_points?: Int;
  petitions_signed?: PetitionCreateManyWithoutUsersInput;
  community_events?: CommunityEventCreateManyInput;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
}

export interface EventActionUpdateInput {
  action?: ActionUpdateOneRequiredInput;
  user?: UserUpdateOneRequiredWithoutRecent_actionsInput;
  took_action?: Boolean;
}

export interface UserUpdateOneRequiredWithoutRecent_actionsInput {
  create?: UserCreateWithoutRecent_actionsInput;
  update?: UserUpdateWithoutRecent_actionsDataInput;
  upsert?: UserUpsertWithoutRecent_actionsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutRecent_actionsDataInput {
  username?: String;
  email?: String;
  password?: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  role?: RoleUpdateOneInput;
  zipcode?: String;
  total_points?: Int;
  petitions_signed?: PetitionUpdateManyWithoutUsersInput;
  community_events?: CommunityEventUpdateManyInput;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
}

export interface UserUpsertWithoutRecent_actionsInput {
  update: UserUpdateWithoutRecent_actionsDataInput;
  create: UserCreateWithoutRecent_actionsInput;
}

export interface EventActionUpdateManyMutationInput {
  took_action?: Boolean;
}

export interface PetitionCreateInput {
  title: String;
  active?: Boolean;
  short_description: String;
  body: String;
  order?: Int;
  primary_image?: String;
  video_url?: String;
  external_url?: String;
  hasVideo?: Boolean;
  users?: UserCreateManyWithoutPetitions_signedInput;
  author: UserCreateOneInput;
}

export interface UserCreateManyWithoutPetitions_signedInput {
  create?:
    | UserCreateWithoutPetitions_signedInput[]
    | UserCreateWithoutPetitions_signedInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserCreateWithoutPetitions_signedInput {
  username?: String;
  email?: String;
  password: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  role?: RoleCreateOneInput;
  zipcode?: String;
  recent_actions?: EventActionCreateManyWithoutUserInput;
  total_points?: Int;
  community_events?: CommunityEventCreateManyInput;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
}

export interface PetitionUpdateInput {
  title?: String;
  active?: Boolean;
  short_description?: String;
  body?: String;
  order?: Int;
  primary_image?: String;
  video_url?: String;
  external_url?: String;
  hasVideo?: Boolean;
  users?: UserUpdateManyWithoutPetitions_signedInput;
  author?: UserUpdateOneRequiredInput;
}

export interface UserUpdateManyWithoutPetitions_signedInput {
  create?:
    | UserCreateWithoutPetitions_signedInput[]
    | UserCreateWithoutPetitions_signedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutPetitions_signedInput[]
    | UserUpdateWithWhereUniqueWithoutPetitions_signedInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutPetitions_signedInput[]
    | UserUpsertWithWhereUniqueWithoutPetitions_signedInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithWhereUniqueWithoutPetitions_signedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPetitions_signedDataInput;
}

export interface UserUpdateWithoutPetitions_signedDataInput {
  username?: String;
  email?: String;
  password?: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  role?: RoleUpdateOneInput;
  zipcode?: String;
  recent_actions?: EventActionUpdateManyWithoutUserInput;
  total_points?: Int;
  community_events?: CommunityEventUpdateManyInput;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
}

export interface UserUpsertWithWhereUniqueWithoutPetitions_signedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutPetitions_signedDataInput;
  create: UserCreateWithoutPetitions_signedInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  phone?: String;
  phone_not?: String;
  phone_in?: String[] | String;
  phone_not_in?: String[] | String;
  phone_lt?: String;
  phone_lte?: String;
  phone_gt?: String;
  phone_gte?: String;
  phone_contains?: String;
  phone_not_contains?: String;
  phone_starts_with?: String;
  phone_not_starts_with?: String;
  phone_ends_with?: String;
  phone_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  photo?: String;
  photo_not?: String;
  photo_in?: String[] | String;
  photo_not_in?: String[] | String;
  photo_lt?: String;
  photo_lte?: String;
  photo_gt?: String;
  photo_gte?: String;
  photo_contains?: String;
  photo_not_contains?: String;
  photo_starts_with?: String;
  photo_not_starts_with?: String;
  photo_ends_with?: String;
  photo_not_ends_with?: String;
  zipcode?: String;
  zipcode_not?: String;
  zipcode_in?: String[] | String;
  zipcode_not_in?: String[] | String;
  zipcode_lt?: String;
  zipcode_lte?: String;
  zipcode_gt?: String;
  zipcode_gte?: String;
  zipcode_contains?: String;
  zipcode_not_contains?: String;
  zipcode_starts_with?: String;
  zipcode_not_starts_with?: String;
  zipcode_ends_with?: String;
  zipcode_not_ends_with?: String;
  total_points?: Int;
  total_points_not?: Int;
  total_points_in?: Int[] | Int;
  total_points_not_in?: Int[] | Int;
  total_points_lt?: Int;
  total_points_lte?: Int;
  total_points_gt?: Int;
  total_points_gte?: Int;
  device_id?: String;
  device_id_not?: String;
  device_id_in?: String[] | String;
  device_id_not_in?: String[] | String;
  device_id_lt?: String;
  device_id_lte?: String;
  device_id_gt?: String;
  device_id_gte?: String;
  device_id_contains?: String;
  device_id_not_contains?: String;
  device_id_starts_with?: String;
  device_id_not_starts_with?: String;
  device_id_ends_with?: String;
  device_id_not_ends_with?: String;
  crew_type?: String;
  crew_type_not?: String;
  crew_type_in?: String[] | String;
  crew_type_not_in?: String[] | String;
  crew_type_lt?: String;
  crew_type_lte?: String;
  crew_type_gt?: String;
  crew_type_gte?: String;
  crew_type_contains?: String;
  crew_type_not_contains?: String;
  crew_type_starts_with?: String;
  crew_type_not_starts_with?: String;
  crew_type_ends_with?: String;
  crew_type_not_ends_with?: String;
  crew?: String;
  crew_not?: String;
  crew_in?: String[] | String;
  crew_not_in?: String[] | String;
  crew_lt?: String;
  crew_lte?: String;
  crew_gt?: String;
  crew_gte?: String;
  crew_contains?: String;
  crew_not_contains?: String;
  crew_starts_with?: String;
  crew_not_starts_with?: String;
  crew_ends_with?: String;
  crew_not_ends_with?: String;
  push_notifications_enabled?: Boolean;
  push_notifications_enabled_not?: Boolean;
  action_reminders?: Boolean;
  action_reminders_not?: Boolean;
  new_highlights_notification?: Boolean;
  new_highlights_notification_not?: Boolean;
  new_features_notification?: Boolean;
  new_features_notification_not?: Boolean;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  country_name?: String;
  country_name_not?: String;
  country_name_in?: String[] | String;
  country_name_not_in?: String[] | String;
  country_name_lt?: String;
  country_name_lte?: String;
  country_name_gt?: String;
  country_name_gte?: String;
  country_name_contains?: String;
  country_name_not_contains?: String;
  country_name_starts_with?: String;
  country_name_not_starts_with?: String;
  country_name_ends_with?: String;
  country_name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  username?: String;
  email?: String;
  password?: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  zipcode?: String;
  total_points?: Int;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
}

export interface PetitionUpdateManyMutationInput {
  title?: String;
  active?: Boolean;
  short_description?: String;
  body?: String;
  order?: Int;
  primary_image?: String;
  video_url?: String;
  external_url?: String;
  hasVideo?: Boolean;
}

export interface RoleUpdateInput {
  role_name?: String;
}

export interface RoleUpdateManyMutationInput {
  role_name?: String;
}

export interface UserUpdateInput {
  username?: String;
  email?: String;
  password?: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  role?: RoleUpdateOneInput;
  zipcode?: String;
  recent_actions?: EventActionUpdateManyWithoutUserInput;
  total_points?: Int;
  petitions_signed?: PetitionUpdateManyWithoutUsersInput;
  community_events?: CommunityEventUpdateManyInput;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
}

export interface UserUpdateManyMutationInput {
  username?: String;
  email?: String;
  password?: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  zipcode?: String;
  total_points?: Int;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
}

export interface ActionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ActionWhereInput;
  AND?: ActionSubscriptionWhereInput[] | ActionSubscriptionWhereInput;
  OR?: ActionSubscriptionWhereInput[] | ActionSubscriptionWhereInput;
  NOT?: ActionSubscriptionWhereInput[] | ActionSubscriptionWhereInput;
}

export interface ActionCategorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ActionCategoryWhereInput;
  AND?:
    | ActionCategorySubscriptionWhereInput[]
    | ActionCategorySubscriptionWhereInput;
  OR?:
    | ActionCategorySubscriptionWhereInput[]
    | ActionCategorySubscriptionWhereInput;
  NOT?:
    | ActionCategorySubscriptionWhereInput[]
    | ActionCategorySubscriptionWhereInput;
}

export interface CommunityEventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommunityEventWhereInput;
  AND?:
    | CommunityEventSubscriptionWhereInput[]
    | CommunityEventSubscriptionWhereInput;
  OR?:
    | CommunityEventSubscriptionWhereInput[]
    | CommunityEventSubscriptionWhereInput;
  NOT?:
    | CommunityEventSubscriptionWhereInput[]
    | CommunityEventSubscriptionWhereInput;
}

export interface EventActionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EventActionWhereInput;
  AND?: EventActionSubscriptionWhereInput[] | EventActionSubscriptionWhereInput;
  OR?: EventActionSubscriptionWhereInput[] | EventActionSubscriptionWhereInput;
  NOT?: EventActionSubscriptionWhereInput[] | EventActionSubscriptionWhereInput;
}

export interface PetitionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PetitionWhereInput;
  AND?: PetitionSubscriptionWhereInput[] | PetitionSubscriptionWhereInput;
  OR?: PetitionSubscriptionWhereInput[] | PetitionSubscriptionWhereInput;
  NOT?: PetitionSubscriptionWhereInput[] | PetitionSubscriptionWhereInput;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RoleWhereInput;
  AND?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  OR?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  NOT?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Action {
  id: ID_Output;
  primary_image?: String;
  active?: Boolean;
  short_description: String;
  action_taken_description: String;
  schedule?: Schedule;
  video_url?: String;
  carbon_dioxide?: Float;
  order?: Int;
  water?: Float;
  waste?: Float;
  points?: Int;
  external_url?: String;
  isGame: Boolean;
  game_title?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ActionPromise extends Promise<Action>, Fragmentable {
  id: () => Promise<ID_Output>;
  category: <T = ActionCategoryPromise>() => T;
  primary_image: () => Promise<String>;
  active: () => Promise<Boolean>;
  short_description: () => Promise<String>;
  action_taken_description: () => Promise<String>;
  schedule: () => Promise<Schedule>;
  video_url: () => Promise<String>;
  carbon_dioxide: () => Promise<Float>;
  order: () => Promise<Int>;
  water: () => Promise<Float>;
  waste: () => Promise<Float>;
  points: () => Promise<Int>;
  external_url: () => Promise<String>;
  isGame: () => Promise<Boolean>;
  game_title: () => Promise<String>;
  related_actions: <T = FragmentableArray<Action>>(
    args?: {
      where?: ActionWhereInput;
      orderBy?: ActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ActionSubscription
  extends Promise<AsyncIterator<Action>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  category: <T = ActionCategorySubscription>() => T;
  primary_image: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  short_description: () => Promise<AsyncIterator<String>>;
  action_taken_description: () => Promise<AsyncIterator<String>>;
  schedule: () => Promise<AsyncIterator<Schedule>>;
  video_url: () => Promise<AsyncIterator<String>>;
  carbon_dioxide: () => Promise<AsyncIterator<Float>>;
  order: () => Promise<AsyncIterator<Int>>;
  water: () => Promise<AsyncIterator<Float>>;
  waste: () => Promise<AsyncIterator<Float>>;
  points: () => Promise<AsyncIterator<Int>>;
  external_url: () => Promise<AsyncIterator<String>>;
  isGame: () => Promise<AsyncIterator<Boolean>>;
  game_title: () => Promise<AsyncIterator<String>>;
  related_actions: <T = Promise<AsyncIterator<ActionSubscription>>>(
    args?: {
      where?: ActionWhereInput;
      orderBy?: ActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActionCategory {
  id: ID_Output;
  name: String;
  primary_image?: String;
  video_id?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ActionCategoryPromise
  extends Promise<ActionCategory>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  actions: <T = FragmentableArray<Action>>(
    args?: {
      where?: ActionWhereInput;
      orderBy?: ActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  primary_image: () => Promise<String>;
  video_id: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ActionCategorySubscription
  extends Promise<AsyncIterator<ActionCategory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  actions: <T = Promise<AsyncIterator<ActionSubscription>>>(
    args?: {
      where?: ActionWhereInput;
      orderBy?: ActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  primary_image: () => Promise<AsyncIterator<String>>;
  video_id: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  username?: String;
  email?: String;
  password: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  zipcode?: String;
  total_points?: Int;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  token: () => Promise<String>;
  photo: () => Promise<String>;
  role: <T = RolePromise>() => T;
  zipcode: () => Promise<String>;
  recent_actions: <T = FragmentableArray<EventAction>>(
    args?: {
      where?: EventActionWhereInput;
      orderBy?: EventActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  total_points: () => Promise<Int>;
  petitions_signed: <T = FragmentableArray<Petition>>(
    args?: {
      where?: PetitionWhereInput;
      orderBy?: PetitionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  community_events: <T = FragmentableArray<CommunityEvent>>(
    args?: {
      where?: CommunityEventWhereInput;
      orderBy?: CommunityEventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  device_id: () => Promise<String>;
  crew_type: () => Promise<String>;
  crew: () => Promise<String>;
  push_notifications_enabled: () => Promise<Boolean>;
  action_reminders: () => Promise<Boolean>;
  new_highlights_notification: () => Promise<Boolean>;
  new_features_notification: () => Promise<Boolean>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  country_name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  role: <T = RoleSubscription>() => T;
  zipcode: () => Promise<AsyncIterator<String>>;
  recent_actions: <T = Promise<AsyncIterator<EventActionSubscription>>>(
    args?: {
      where?: EventActionWhereInput;
      orderBy?: EventActionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  total_points: () => Promise<AsyncIterator<Int>>;
  petitions_signed: <T = Promise<AsyncIterator<PetitionSubscription>>>(
    args?: {
      where?: PetitionWhereInput;
      orderBy?: PetitionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  community_events: <T = Promise<AsyncIterator<CommunityEventSubscription>>>(
    args?: {
      where?: CommunityEventWhereInput;
      orderBy?: CommunityEventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  device_id: () => Promise<AsyncIterator<String>>;
  crew_type: () => Promise<AsyncIterator<String>>;
  crew: () => Promise<AsyncIterator<String>>;
  push_notifications_enabled: () => Promise<AsyncIterator<Boolean>>;
  action_reminders: () => Promise<AsyncIterator<Boolean>>;
  new_highlights_notification: () => Promise<AsyncIterator<Boolean>>;
  new_features_notification: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  country_name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Role {
  id: ID_Output;
  role_name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  role_name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  role_name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventAction {
  id: ID_Output;
  took_action: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EventActionPromise extends Promise<EventAction>, Fragmentable {
  id: () => Promise<ID_Output>;
  action: <T = ActionPromise>() => T;
  user: <T = UserPromise>() => T;
  took_action: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventActionSubscription
  extends Promise<AsyncIterator<EventAction>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  action: <T = ActionSubscription>() => T;
  user: <T = UserSubscription>() => T;
  took_action: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface Petition {
  id: ID_Output;
  title: String;
  active?: Boolean;
  short_description: String;
  body: String;
  order?: Int;
  primary_image?: String;
  video_url?: String;
  external_url?: String;
  hasVideo: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PetitionPromise extends Promise<Petition>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  active: () => Promise<Boolean>;
  short_description: () => Promise<String>;
  body: () => Promise<String>;
  order: () => Promise<Int>;
  primary_image: () => Promise<String>;
  video_url: () => Promise<String>;
  external_url: () => Promise<String>;
  hasVideo: () => Promise<Boolean>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PetitionSubscription
  extends Promise<AsyncIterator<Petition>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  short_description: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  primary_image: () => Promise<AsyncIterator<String>>;
  video_url: () => Promise<AsyncIterator<String>>;
  external_url: () => Promise<AsyncIterator<String>>;
  hasVideo: () => Promise<AsyncIterator<Boolean>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommunityEvent {
  id: ID_Output;
  type: String;
  number_of_people: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommunityEventPromise
  extends Promise<CommunityEvent>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  number_of_people: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommunityEventSubscription
  extends Promise<AsyncIterator<CommunityEvent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  number_of_people: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActionConnection {}

export interface ActionConnectionPromise
  extends Promise<ActionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActionEdge>>() => T;
  aggregate: <T = AggregateActionPromise>() => T;
}

export interface ActionConnectionSubscription
  extends Promise<AsyncIterator<ActionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ActionEdge {
  cursor: String;
}

export interface ActionEdgePromise extends Promise<ActionEdge>, Fragmentable {
  node: <T = ActionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActionEdgeSubscription
  extends Promise<AsyncIterator<ActionEdge>>,
    Fragmentable {
  node: <T = ActionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAction {
  count: Int;
}

export interface AggregateActionPromise
  extends Promise<AggregateAction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActionSubscription
  extends Promise<AsyncIterator<AggregateAction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActionCategoryConnection {}

export interface ActionCategoryConnectionPromise
  extends Promise<ActionCategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActionCategoryEdge>>() => T;
  aggregate: <T = AggregateActionCategoryPromise>() => T;
}

export interface ActionCategoryConnectionSubscription
  extends Promise<AsyncIterator<ActionCategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActionCategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActionCategorySubscription>() => T;
}

export interface ActionCategoryEdge {
  cursor: String;
}

export interface ActionCategoryEdgePromise
  extends Promise<ActionCategoryEdge>,
    Fragmentable {
  node: <T = ActionCategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActionCategoryEdgeSubscription
  extends Promise<AsyncIterator<ActionCategoryEdge>>,
    Fragmentable {
  node: <T = ActionCategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActionCategory {
  count: Int;
}

export interface AggregateActionCategoryPromise
  extends Promise<AggregateActionCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActionCategorySubscription
  extends Promise<AsyncIterator<AggregateActionCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommunityEventConnection {}

export interface CommunityEventConnectionPromise
  extends Promise<CommunityEventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommunityEventEdge>>() => T;
  aggregate: <T = AggregateCommunityEventPromise>() => T;
}

export interface CommunityEventConnectionSubscription
  extends Promise<AsyncIterator<CommunityEventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommunityEventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommunityEventSubscription>() => T;
}

export interface CommunityEventEdge {
  cursor: String;
}

export interface CommunityEventEdgePromise
  extends Promise<CommunityEventEdge>,
    Fragmentable {
  node: <T = CommunityEventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommunityEventEdgeSubscription
  extends Promise<AsyncIterator<CommunityEventEdge>>,
    Fragmentable {
  node: <T = CommunityEventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCommunityEvent {
  count: Int;
}

export interface AggregateCommunityEventPromise
  extends Promise<AggregateCommunityEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommunityEventSubscription
  extends Promise<AsyncIterator<AggregateCommunityEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EventActionConnection {}

export interface EventActionConnectionPromise
  extends Promise<EventActionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventActionEdge>>() => T;
  aggregate: <T = AggregateEventActionPromise>() => T;
}

export interface EventActionConnectionSubscription
  extends Promise<AsyncIterator<EventActionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventActionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventActionSubscription>() => T;
}

export interface EventActionEdge {
  cursor: String;
}

export interface EventActionEdgePromise
  extends Promise<EventActionEdge>,
    Fragmentable {
  node: <T = EventActionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventActionEdgeSubscription
  extends Promise<AsyncIterator<EventActionEdge>>,
    Fragmentable {
  node: <T = EventActionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEventAction {
  count: Int;
}

export interface AggregateEventActionPromise
  extends Promise<AggregateEventAction>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventActionSubscription
  extends Promise<AsyncIterator<AggregateEventAction>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PetitionConnection {}

export interface PetitionConnectionPromise
  extends Promise<PetitionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PetitionEdge>>() => T;
  aggregate: <T = AggregatePetitionPromise>() => T;
}

export interface PetitionConnectionSubscription
  extends Promise<AsyncIterator<PetitionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PetitionEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePetitionSubscription>() => T;
}

export interface PetitionEdge {
  cursor: String;
}

export interface PetitionEdgePromise
  extends Promise<PetitionEdge>,
    Fragmentable {
  node: <T = PetitionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PetitionEdgeSubscription
  extends Promise<AsyncIterator<PetitionEdge>>,
    Fragmentable {
  node: <T = PetitionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePetition {
  count: Int;
}

export interface AggregatePetitionPromise
  extends Promise<AggregatePetition>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePetitionSubscription
  extends Promise<AsyncIterator<AggregatePetition>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleConnection {}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface RoleEdge {
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ActionSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ActionSubscriptionPayloadPromise
  extends Promise<ActionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActionPreviousValuesPromise>() => T;
}

export interface ActionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActionPreviousValuesSubscription>() => T;
}

export interface ActionPreviousValues {
  id: ID_Output;
  primary_image?: String;
  active?: Boolean;
  short_description: String;
  action_taken_description: String;
  schedule?: Schedule;
  video_url?: String;
  carbon_dioxide?: Float;
  order?: Int;
  water?: Float;
  waste?: Float;
  points?: Int;
  external_url?: String;
  isGame: Boolean;
  game_title?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ActionPreviousValuesPromise
  extends Promise<ActionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  primary_image: () => Promise<String>;
  active: () => Promise<Boolean>;
  short_description: () => Promise<String>;
  action_taken_description: () => Promise<String>;
  schedule: () => Promise<Schedule>;
  video_url: () => Promise<String>;
  carbon_dioxide: () => Promise<Float>;
  order: () => Promise<Int>;
  water: () => Promise<Float>;
  waste: () => Promise<Float>;
  points: () => Promise<Int>;
  external_url: () => Promise<String>;
  isGame: () => Promise<Boolean>;
  game_title: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ActionPreviousValuesSubscription
  extends Promise<AsyncIterator<ActionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  primary_image: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  short_description: () => Promise<AsyncIterator<String>>;
  action_taken_description: () => Promise<AsyncIterator<String>>;
  schedule: () => Promise<AsyncIterator<Schedule>>;
  video_url: () => Promise<AsyncIterator<String>>;
  carbon_dioxide: () => Promise<AsyncIterator<Float>>;
  order: () => Promise<AsyncIterator<Int>>;
  water: () => Promise<AsyncIterator<Float>>;
  waste: () => Promise<AsyncIterator<Float>>;
  points: () => Promise<AsyncIterator<Int>>;
  external_url: () => Promise<AsyncIterator<String>>;
  isGame: () => Promise<AsyncIterator<Boolean>>;
  game_title: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActionCategorySubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ActionCategorySubscriptionPayloadPromise
  extends Promise<ActionCategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActionCategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActionCategoryPreviousValuesPromise>() => T;
}

export interface ActionCategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActionCategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActionCategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActionCategoryPreviousValuesSubscription>() => T;
}

export interface ActionCategoryPreviousValues {
  id: ID_Output;
  name: String;
  primary_image?: String;
  video_id?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ActionCategoryPreviousValuesPromise
  extends Promise<ActionCategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  primary_image: () => Promise<String>;
  video_id: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ActionCategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<ActionCategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  primary_image: () => Promise<AsyncIterator<String>>;
  video_id: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommunityEventSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CommunityEventSubscriptionPayloadPromise
  extends Promise<CommunityEventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommunityEventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommunityEventPreviousValuesPromise>() => T;
}

export interface CommunityEventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommunityEventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommunityEventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommunityEventPreviousValuesSubscription>() => T;
}

export interface CommunityEventPreviousValues {
  id: ID_Output;
  type: String;
  number_of_people: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CommunityEventPreviousValuesPromise
  extends Promise<CommunityEventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
  number_of_people: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CommunityEventPreviousValuesSubscription
  extends Promise<AsyncIterator<CommunityEventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
  number_of_people: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventActionSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface EventActionSubscriptionPayloadPromise
  extends Promise<EventActionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventActionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventActionPreviousValuesPromise>() => T;
}

export interface EventActionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventActionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventActionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventActionPreviousValuesSubscription>() => T;
}

export interface EventActionPreviousValues {
  id: ID_Output;
  took_action: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EventActionPreviousValuesPromise
  extends Promise<EventActionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  took_action: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EventActionPreviousValuesSubscription
  extends Promise<AsyncIterator<EventActionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  took_action: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PetitionSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PetitionSubscriptionPayloadPromise
  extends Promise<PetitionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PetitionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PetitionPreviousValuesPromise>() => T;
}

export interface PetitionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PetitionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PetitionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PetitionPreviousValuesSubscription>() => T;
}

export interface PetitionPreviousValues {
  id: ID_Output;
  title: String;
  active?: Boolean;
  short_description: String;
  body: String;
  order?: Int;
  primary_image?: String;
  video_url?: String;
  external_url?: String;
  hasVideo: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PetitionPreviousValuesPromise
  extends Promise<PetitionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  active: () => Promise<Boolean>;
  short_description: () => Promise<String>;
  body: () => Promise<String>;
  order: () => Promise<Int>;
  primary_image: () => Promise<String>;
  video_url: () => Promise<String>;
  external_url: () => Promise<String>;
  hasVideo: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PetitionPreviousValuesSubscription
  extends Promise<AsyncIterator<PetitionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  short_description: () => Promise<AsyncIterator<String>>;
  body: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  primary_image: () => Promise<AsyncIterator<String>>;
  video_url: () => Promise<AsyncIterator<String>>;
  external_url: () => Promise<AsyncIterator<String>>;
  hasVideo: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface RolePreviousValues {
  id: ID_Output;
  role_name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  role_name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  role_name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username?: String;
  email?: String;
  password: String;
  name?: String;
  phone?: String;
  token?: String;
  photo?: String;
  zipcode?: String;
  total_points?: Int;
  device_id?: String;
  crew_type?: String;
  crew?: String;
  push_notifications_enabled?: Boolean;
  action_reminders?: Boolean;
  new_highlights_notification?: Boolean;
  new_features_notification?: Boolean;
  state?: String;
  country?: String;
  country_name?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
  token: () => Promise<String>;
  photo: () => Promise<String>;
  zipcode: () => Promise<String>;
  total_points: () => Promise<Int>;
  device_id: () => Promise<String>;
  crew_type: () => Promise<String>;
  crew: () => Promise<String>;
  push_notifications_enabled: () => Promise<Boolean>;
  action_reminders: () => Promise<Boolean>;
  new_highlights_notification: () => Promise<Boolean>;
  new_features_notification: () => Promise<Boolean>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  country_name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  photo: () => Promise<AsyncIterator<String>>;
  zipcode: () => Promise<AsyncIterator<String>>;
  total_points: () => Promise<AsyncIterator<Int>>;
  device_id: () => Promise<AsyncIterator<String>>;
  crew_type: () => Promise<AsyncIterator<String>>;
  crew: () => Promise<AsyncIterator<String>>;
  push_notifications_enabled: () => Promise<AsyncIterator<Boolean>>;
  action_reminders: () => Promise<AsyncIterator<Boolean>>;
  new_highlights_notification: () => Promise<AsyncIterator<Boolean>>;
  new_features_notification: () => Promise<AsyncIterator<Boolean>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  country_name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Action",
    embedded: false
  },
  {
    name: "ActionCategory",
    embedded: false
  },
  {
    name: "CommunityEvent",
    embedded: false
  },
  {
    name: "EventAction",
    embedded: false
  },
  {
    name: "Petition",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Schedule",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
